// <auto-generated />
using System;
using LojaLegos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LojaLegos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230711193636_roleseedAndLorem")]
    partial class roleseedAndLorem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LojaLegos.Models.Armazem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResponsavelFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsavelFK");

                    b.ToTable("Armazem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Local = "Tomar",
                            ResponsavelFK = 1
                        });
                });

            modelBuilder.Entity("LojaLegos.Models.Artigo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArmazemFK")
                        .HasColumnType("int");

                    b.Property<string>("Detalhes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NrPecas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Stock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ArmazemFK");

                    b.ToTable("Artigos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "42004.jpg",
                            Nome = "Mini blackhoe Loader",
                            Nr = "42004",
                            NrPecas = "97",
                            Preco = 113.99m,
                            Stock = "5",
                            Tipo = "Technic"
                        },
                        new
                        {
                            Id = 2,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "42057.jpg",
                            Nome = "Ultralight Helicopter",
                            Nr = "42057",
                            NrPecas = "105",
                            Preco = 119.99m,
                            Stock = "99",
                            Tipo = "Technic"
                        },
                        new
                        {
                            Id = 3,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "60239.jpg",
                            Nome = "Police Car",
                            Nr = "60238",
                            NrPecas = "94",
                            Preco = 19.99m,
                            Stock = "36",
                            Tipo = "City"
                        },
                        new
                        {
                            Id = 4,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "60292.jpg",
                            Nome = "Headquarters",
                            Nr = "60292",
                            NrPecas = "790",
                            Preco = 64.99m,
                            Stock = "47",
                            Tipo = "City"
                        },
                        new
                        {
                            Id = 5,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "6157.jpg",
                            Nome = "Zoo",
                            Nr = "6157",
                            NrPecas = "101",
                            Preco = 49.99m,
                            Stock = "93",
                            Tipo = "Duplo"
                        },
                        new
                        {
                            Id = 6,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "10959.jpg",
                            Nome = "Police Station",
                            Nr = "10959",
                            NrPecas = "40",
                            Preco = 49.99m,
                            Stock = "12",
                            Tipo = "Duplo"
                        },
                        new
                        {
                            Id = 7,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "8831.jpg",
                            Nome = "Atlas",
                            Nr = "8831",
                            NrPecas = "1",
                            Preco = 9.99m,
                            Stock = "68",
                            Tipo = "Minifigures"
                        },
                        new
                        {
                            Id = 8,
                            ArmazemFK = 1,
                            Detalhes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam ut eros risus. Morbi dignissim in dui in volutpat. Proin at mauris vitae risus",
                            Foto = "71011.jpg",
                            Nome = "Field Worker",
                            Nr = "71011",
                            NrPecas = "1",
                            Preco = 9.99m,
                            Stock = "76",
                            Tipo = "Minifigures"
                        });
                });

            modelBuilder.Entity("LojaLegos.Models.ArtigoEncomenda", b =>
                {
                    b.Property<int>("ArtigoId")
                        .HasColumnType("int");

                    b.Property<int>("EncomendaId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ArtigoId", "EncomendaId");

                    b.HasIndex("EncomendaId");

                    b.ToTable("ArtigoEncomendas");

                    b.HasData(
                        new
                        {
                            ArtigoId = 1,
                            EncomendaId = 1,
                            Quantidade = 23
                        },
                        new
                        {
                            ArtigoId = 2,
                            EncomendaId = 1,
                            Quantidade = 26
                        });
                });

            modelBuilder.Entity("LojaLegos.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Morada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NrContribuinte")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("NrTelemovel")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("País")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apelido = "Mendes",
                            Cidade = "Santo António dos Cavaleiros",
                            CodPostal = "2660-284",
                            Email = "goncalomendes@sapo.pt",
                            Morada = "Rua...",
                            NrContribuinte = "412414141",
                            NrTelemovel = "941941941",
                            País = "Portugal",
                            PrimeiroNome = "Gonçalo",
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("LojaLegos.Models.Encomenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClienteFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteFK");

                    b.ToTable("Encomendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteFK = 1,
                            Data = new DateTime(2023, 6, 25, 13, 58, 56, 0, DateTimeKind.Unspecified),
                            Estado = "pago",
                            Total = "3000"
                        });
                });

            modelBuilder.Entity("LojaLegos.Models.Funcs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChefeFK")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NrTelemovel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChefeFK");

                    b.ToTable("Funcionarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "Funcionário",
                            ChefeFK = 1,
                            Email = "beatrizpatita@blabla.com",
                            Nome = "Beatriz",
                            NrTelemovel = "942942942",
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("LojaLegos.Models.Gestor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NrTelemovel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gestor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "Gestor",
                            Email = "luisfreitas@blabla.com",
                            Foto = "",
                            Nome = "Luís Freitas",
                            NrTelemovel = "943943943",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c",
                            ConcurrencyStamp = "c1b9196c-3b8a-4d0d-9b4c-f2de324a3931",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "g",
                            ConcurrencyStamp = "9b196735-28af-46ef-a377-cc96875ce99a",
                            Name = "Gestor",
                            NormalizedName = "GESTOR"
                        },
                        new
                        {
                            Id = "f",
                            ConcurrencyStamp = "69e2aa7a-db54-46d7-bcf8-c593e2f338cd",
                            Name = "Funcionario",
                            NormalizedName = "FUNCIONARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3",
                            RoleId = "g"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "f"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LojaLegos.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "935eeebd-59c8-4966-a292-d2dba0dadcf1",
                            Email = "cliente2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CLIENTE2@GMAIL.COM",
                            NormalizedUserName = "CLIENTE2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOYczKQqE1HOoOjN+Kjus8JxtwKu5ve7HR3l0HsfbjQ1M/vD18qeS+UazaukaYaRGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9313994-b74a-47f5-bba0-8e721e5a4917",
                            TwoFactorEnabled = false,
                            UserName = "cliente2@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f58c65d-03ea-4c21-9bd9-45cfd8995c83",
                            Email = "beatrizpatita@blabla.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "BEATRIZPATITA@BLABLA.COM",
                            NormalizedUserName = "BEATRIZPATITA@BLABLA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNdTfKG8vH7N0JO8CLUCfliX6+wX3HbUbE4sk/LhaUUk5Rf3qsfKf3rl+INJ/l5yQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c427cb7-0593-422f-a38f-66b77e4c451a",
                            TwoFactorEnabled = false,
                            UserName = "beatrizpatita@blabla.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e8f32cd-f6e8-4d7a-8170-80da2e827035",
                            Email = "Luisfreitas@blabla.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "LUISFREITAS@BLABLA.COM",
                            NormalizedUserName = "LUISFREITAS@BLABLA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECh5t0/wJeAFpgSGezVU9TlwCfNDyKca0hMujBVjw71PsQgN8dqQ7gqun6YqafRNpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "294997c6-d6fb-4570-b414-3e549363b068",
                            TwoFactorEnabled = false,
                            UserName = "Luisfreitas@blabla.com"
                        });
                });

            modelBuilder.Entity("LojaLegos.Models.Armazem", b =>
                {
                    b.HasOne("LojaLegos.Models.Funcs", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("LojaLegos.Models.Artigo", b =>
                {
                    b.HasOne("LojaLegos.Models.Armazem", "Armazem")
                        .WithMany("Artigos")
                        .HasForeignKey("ArmazemFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armazem");
                });

            modelBuilder.Entity("LojaLegos.Models.ArtigoEncomenda", b =>
                {
                    b.HasOne("LojaLegos.Models.Artigo", "Artigo")
                        .WithMany("ArtigoEncomendas")
                        .HasForeignKey("ArtigoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaLegos.Models.Encomenda", "Encomenda")
                        .WithMany("ArtigoEncomendas")
                        .HasForeignKey("EncomendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artigo");

                    b.Navigation("Encomenda");
                });

            modelBuilder.Entity("LojaLegos.Models.Encomenda", b =>
                {
                    b.HasOne("LojaLegos.Models.Cliente", "Cliente")
                        .WithMany("Encomendas")
                        .HasForeignKey("ClienteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LojaLegos.Models.Funcs", b =>
                {
                    b.HasOne("LojaLegos.Models.Gestor", "Gestor")
                        .WithMany("Funcionarios")
                        .HasForeignKey("ChefeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gestor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LojaLegos.Models.Armazem", b =>
                {
                    b.Navigation("Artigos");
                });

            modelBuilder.Entity("LojaLegos.Models.Artigo", b =>
                {
                    b.Navigation("ArtigoEncomendas");
                });

            modelBuilder.Entity("LojaLegos.Models.Cliente", b =>
                {
                    b.Navigation("Encomendas");
                });

            modelBuilder.Entity("LojaLegos.Models.Encomenda", b =>
                {
                    b.Navigation("ArtigoEncomendas");
                });

            modelBuilder.Entity("LojaLegos.Models.Gestor", b =>
                {
                    b.Navigation("Funcionarios");
                });
#pragma warning restore 612, 618
        }
    }
}
